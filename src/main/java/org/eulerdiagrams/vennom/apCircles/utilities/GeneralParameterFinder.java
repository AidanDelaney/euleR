package org.eulerdiagrams.vennom.apCircles.utilities;import java.io.*;import java.util.*;import java.awt.Frame;import java.awt.Point;import java.awt.event.*;import java.awt.geom.Ellipse2D;import java.awt.geom.Point2D;import org.eulerdiagrams.vennom.apCircles.*;import org.eulerdiagrams.vennom.apCircles.display.APCircleDisplay;import org.eulerdiagrams.vennom.graph.Edge;import org.eulerdiagrams.vennom.graph.EdgeType;import org.eulerdiagrams.vennom.graph.Graph;import org.eulerdiagrams.vennom.graph.Node;import org.eulerdiagrams.vennom.graph.utilities.GraphUtility;/** * Just for quick testing of methods. */public class GeneralParameterFinder extends GraphUtility implements Serializable {	private static final long serialVersionUID = 1L;	double startChange = 0.8;/** Trivial constructor. */	public GeneralParameterFinder() {		super(KeyEvent.VK_3,"General Parameter Finder",KeyEvent.VK_3);	}	public void apply() {/* Initial - informal empirical experimentation */  		double idealMultipiler = 0.0475;		double separatorMultiplier = 19000.0;		double containmentMultiplier = 0.01;		double f = 1.0; // movement multiplier		int numberOfTestDiagrams = 1000;		long diagramSeed = 4444; 		startChange = 0.8;				runParameterFinder(idealMultipiler,separatorMultiplier,containmentMultiplier,f,numberOfTestDiagrams,diagramSeed);			}			private void runParameterFinder(double idealMultipiler, double separatorMultiplier, double containmentMultiplier, double movementMultipiler, int numberOfTestDiagrams, long diagramSeed) {				double iM = idealMultipiler;		double sM = separatorMultiplier;		double cM = containmentMultiplier;		double f = movementMultipiler;		TestExactGeneral teg = new TestExactGeneral(1024);		teg.setGraphPanel(getGraphPanel());		teg.numberOfTests = numberOfTestDiagrams;		teg.setDiagramSeed(diagramSeed);		boolean improvement = false;				double bestZoneErrors = Double.MAX_VALUE;		double bestAreaErrors = Double.MAX_VALUE;		double niM;		double nsM;		double ncM;		double nf;		double change = startChange;		int i = 0;		while(true) {			teg.idealMultipiler = iM;			teg.separatorMultiplier = sM;			teg.containmentMultiplier = cM;			teg.f  = f;long startTime = System.currentTimeMillis();			teg.apply();long endTime = System.currentTimeMillis();			bestZoneErrors = teg.zoneErrorTotal;			bestAreaErrors = teg.areaErrorTotal;System.out.println("START iM "+teg.idealMultipiler+" sM "+teg.separatorMultiplier+" cM "+teg.containmentMultiplier+" f "+teg.f);System.out.println("START ITERATION "+(i+1)+" time "+(endTime-startTime)/1000+" seconds");System.out.println("START zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);			// increase iM			niM = iM*(1+change);			nsM = sM;			ncM = cM;			nf = f;			teg.idealMultipiler = niM;			teg.separatorMultiplier = nsM;			teg.containmentMultiplier = ncM;			teg.f  = nf;			teg.apply();System.out.println("TRIED increase iM: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);			if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED increase iM");				iM = niM;				sM = nsM;				cM = ncM;				f = nf;				bestZoneErrors = teg.zoneErrorTotal;				bestAreaErrors = teg.areaErrorTotal;				improvement = true;			} else {				// decrease iM				niM = iM*(1-change);				nsM = sM;				ncM = cM;				nf = f;				teg.apply();				teg.idealMultipiler = niM;				teg.separatorMultiplier = nsM;				teg.containmentMultiplier = ncM;				teg.f  = nf;				teg.apply();System.out.println("TRIED decrease iM: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);				if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED decrease iM");					iM = niM;					sM = nsM;					cM = ncM;					f = nf;					bestZoneErrors = teg.zoneErrorTotal;					bestAreaErrors = teg.areaErrorTotal;					improvement = true;				}			}						// increase sM			niM = iM;			nsM = sM*(1+change);			ncM = cM;			nf = f;			teg.idealMultipiler = niM;			teg.separatorMultiplier = nsM;			teg.containmentMultiplier = ncM;			teg.f  = nf;			teg.apply();System.out.println("TRIED increase sM: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);			if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED increase sM");				iM = niM;				sM = nsM;				cM = ncM;				f = nf;				bestZoneErrors = teg.zoneErrorTotal;				bestAreaErrors = teg.areaErrorTotal;				improvement = true;			} else {				// decrease sM				niM = iM;				nsM = sM*(1-change);				ncM = cM;				nf = f;				teg.apply();				teg.idealMultipiler = niM;				teg.separatorMultiplier = nsM;				teg.containmentMultiplier = ncM;				teg.f  = nf;				teg.apply();System.out.println("TRIED decrease sM: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);				if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED decrease sM");					iM = niM;					sM = nsM;					cM = ncM;					f = nf;					bestZoneErrors = teg.zoneErrorTotal;					bestAreaErrors = teg.areaErrorTotal;					improvement = true;				}			}						// increase cM			niM = iM;			nsM = sM;			ncM = cM*(1+change);			nf = f;			teg.idealMultipiler = niM;			teg.separatorMultiplier = nsM;			teg.containmentMultiplier = ncM;			teg.f  = nf;			teg.apply();System.out.println("TRIED increase cM: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);			if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED increase cM");				iM = niM;				sM = nsM;				cM = ncM;				f = nf;				bestZoneErrors = teg.zoneErrorTotal;				bestAreaErrors = teg.areaErrorTotal;				improvement = true;			} else {				// decrease cM				niM = iM;				nsM = sM;				ncM = cM*(1-change);				nf = f;				teg.apply();				teg.idealMultipiler = niM;				teg.separatorMultiplier = nsM;				teg.containmentMultiplier = ncM;				teg.f  = nf;				teg.apply();System.out.println("TRIED decrease cM: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);				if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED decrease cM");					iM = niM;					sM = nsM;					cM = ncM;					f = nf;					bestZoneErrors = teg.zoneErrorTotal;					bestAreaErrors = teg.areaErrorTotal;					improvement = true;				}			}			// increase f			niM = iM;			nsM = sM;			ncM = cM;			nf = f*(1+change);			teg.idealMultipiler = niM;			teg.separatorMultiplier = nsM;			teg.containmentMultiplier = ncM;			teg.f  = nf;			teg.apply();System.out.println("TRIED increase f: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);			if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED increase f");				iM = niM;				sM = nsM;				cM = ncM;				f = nf;				bestZoneErrors = teg.zoneErrorTotal;				bestAreaErrors = teg.areaErrorTotal;				improvement = true;			} else {				// decrease f				niM = iM;				nsM = sM;				ncM = cM;				nf = f*(1-change);				teg.apply();				teg.idealMultipiler = niM;				teg.separatorMultiplier = nsM;				teg.containmentMultiplier = ncM;				teg.f  = nf;				teg.apply();System.out.println("TRIED decrease f: niM "+teg.idealMultipiler+" nsM "+teg.separatorMultiplier+" ncM "+teg.containmentMultiplier+" nf "+teg.f);System.out.println("zoneErrors "+teg.zoneErrorTotal+" areaErrors "+teg.areaErrorTotal);				if((teg.zoneErrorTotal <= bestZoneErrors && teg.areaErrorTotal <= bestAreaErrors) && !(teg.zoneErrorTotal == bestZoneErrors && teg.areaErrorTotal == bestAreaErrors)) {System.out.println("IMPROVED decrease f");					iM = niM;					sM = nsM;					cM = ncM;					f = nf;					bestZoneErrors = teg.zoneErrorTotal;					bestAreaErrors = teg.areaErrorTotal;					improvement = true;				}			}						if(!improvement) {				change = change/2;				if(change < 0.0000001) {					break;				}System.out.println("NO IMPROVEMENT change is now "+change);			}			improvement = false;			i++;		}		System.out.println("BEST zoneErrors "+bestZoneErrors+" areaErrors "+bestAreaErrors);		System.out.println("BEST iM "+iM+" sM "+sM+" cM "+cM+" f "+f);			}	}