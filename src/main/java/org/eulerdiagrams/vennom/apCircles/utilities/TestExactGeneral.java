package org.eulerdiagrams.vennom.apCircles.utilities;import java.io.*;import java.util.*;import java.awt.Point;import java.awt.Polygon;import java.awt.event.*;import java.awt.geom.Area;import java.awt.geom.Ellipse2D;import java.awt.geom.Point2D;import org.eulerdiagrams.vennom.apCircles.*;import org.eulerdiagrams.vennom.apCircles.drawers.*;import org.eulerdiagrams.vennom.graph.*;import org.eulerdiagrams.vennom.graph.utilities.GraphUtility;/** * Just for quick testing of methods. */public class TestExactGeneral extends GraphUtility implements Serializable {	public int minNumberOfCircles = 3;	public int maxNumberOfCircles = 8;	public int zoneAreaMin = 100;	public int zoneAreaMax = 10000;		public int numberOfTests = 100;		AreaSpecification as = null;/**	 * 	 */	private static final long serialVersionUID = 1L;/** Trivial constructor. */	public TestExactGeneral() {		super(KeyEvent.VK_2,"Test Exact General",KeyEvent.VK_2);	}	public void apply() {		as = null;		Graph g = null;		Random random = new Random(100);		int i = 0;System.out.println("type\tdiagram\tzone error\terror measure\ttime");		for(int diagramNo = 1; diagramNo <= numberOfTests; diagramNo++) {			int numberOfCircles = random.nextInt(1+maxNumberOfCircles-minNumberOfCircles);			numberOfCircles += minNumberOfCircles;System.out.println("diagram "+diagramNo+" numberOfCircles "+numberOfCircles+" i "+i);			while(g == null) {				i++;				as = createExactGeneralSpecification(numberOfCircles, i);				g = as.generatePiercedAugmentedIntersectionGraph();				if(g != null && g.getEdges().size() == 0) { // no trivial diagrams					g = null;					 continue;				}			}						String asString = as.toString();			asString = asString.replace('\n', ':');			long startTime = System.currentTimeMillis();			runGeneralTest(as);			double generalTime = (System.currentTimeMillis()-startTime)/1000.0;			System.out.println("general\t"+asString+"\t"+report(as,getGraphPanel().getGraph())+"\t"+generalTime);			g = null;		}	}			public static String report(AreaSpecification ad, Graph g) {		TestRandomPierced.findErrors(ad,g);		String ret = "";		ret += "\t"+(TestRandomPierced.missingZones.size()+TestRandomPierced.additionalZones.size());//System.out.println("missing "+missingZones);//System.out.println("additional "+additionalZones);//System.out.println("errorTotal "+errorTotal);		double errorTotal = 0.0;		for(String zone : TestRandomPierced.errorMap.keySet()) {			errorTotal += TestRandomPierced.errorMap.get(zone);		}		ret += "\t"+errorTotal;				return ret;	}	protected void runGeneralTest(AreaSpecification as) {		Graph g = as.generateGeneralAugmentedIntersectionGraph();		getGraphPanel().setGraph(g);		GeneralAPForceModel fm = new GeneralAPForceModel();		fm.setGraphPanel(getGraphPanel());		fm.setRandomize(false);		fm.setAnimateFlag(false);		fm.layout();	}			public AreaSpecification createExactGeneralSpecification(int circleCount, long seed) {				AreaSpecification areaSpecification = AreaSpecification.exactRandomDiagramFactory(50,50,300,300,15,100,circleCount,seed);		return areaSpecification;	}			}