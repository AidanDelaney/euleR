package org.eulerdiagrams.vennom.apCircles.utilities;import java.io.*;import java.util.ArrayList;import java.util.HashSet;import java.awt.Point;import java.awt.event.*;import org.eulerdiagrams.vennom.apCircles.Util;import org.eulerdiagrams.vennom.apCircles.display.APCircleDisplay;import org.eulerdiagrams.vennom.graph.*;import org.eulerdiagrams.vennom.graph.utilities.GraphUtility;/** * Make the fixed length edges correct. */public class RectifyLengths extends GraphUtility implements Serializable {	private static final long serialVersionUID = 1L;/** Trivial constructor. */	public RectifyLengths() {		super(KeyEvent.VK_Z,"Rectify Lengths",KeyEvent.VK_Z);	}/** Changes the graph. */	public void apply() {		rectifyLengths(getGraph());	}	/**	 * Make the edges with type "fixed" the desired length. Assumes subgraph of those edges is a tree and labelled with desired lengths	 */	public static void rectifyLengths(Graph g) {		g.setNodesVisited(false);		g.setEdgesVisited(false);				Node root = g.getNodes().get(0);		root.setVisited(true);				ArrayList<Node> queue = new ArrayList<Node>();				queue.add(root);				while(queue.size() != 0) {			Node head = queue.get(0);			queue.remove(head);			HashSet<Edge> connectingEdges = head.connectingEdges();			for(Edge e : connectingEdges) {				if(e.getType() != APCircleDisplay.FIXED) {					continue;				}				if(e.getVisited() == false) {					e.setVisited(true);					Node neighbour = e.getOppositeEnd(head);					moveNodeForCorrectLength(e,neighbour);					neighbour.setVisited(true);					queue.add(neighbour);				}			}				}				for(Edge e : g.getEdges()) {	if(e.getType() != APCircleDisplay.FIXED) {		continue;	}	Node n1 = e.getFrom();	Node n2 = e.getTo();	double desiredLength = Double.parseDouble(e.getLabel());	double actualLength = Util.distance(e.getFrom().getCentre(),e.getTo().getCentre());	double error = actualLength-desiredLength;	if(Math.abs(actualLength-desiredLength) > 1) {		System.out.println(" Edge "+n1.getLabel()+" "+n2.getLabel()+" is "+actualLength+" long. Should be "+desiredLength+". Error "+(error));	}}			}	private static void moveNodeForCorrectLength(Edge e, Node n1) {		double desiredLength = Double.parseDouble(e.getLabel());				Node n2 = e.getOppositeEnd(n1);		Point p1 = n1.getCentre();		Point p2 = n2.getCentre();				double actualLength = Util.distance(p1,p2);		double fraction = desiredLength/actualLength;				Point newCentre = Util.betweenPoints(p2, p1, fraction);				n1.setCentre(newCentre);	}	}