package uk.ac.kent.pjr.apCircles.utilities;import java.io.*;import java.util.ArrayList;import java.awt.BasicStroke;import java.awt.event.*;import uk.ac.kent.pjr.apCircles.Util;import uk.ac.kent.pjr.apCircles.display.APCircleDisplay;import uk.ac.kent.pjr.graph.*;import uk.ac.kent.pjr.graph.utilities.GraphUtility;/** * Just for quick testing of methods. */public class ReportPassingEdges extends GraphUtility implements Serializable {/**	 * 	 */	private static final long serialVersionUID = 1L;/** Trivial constructor. */	public ReportPassingEdges() {		super(KeyEvent.VK_P,"Edge Length Report",KeyEvent.VK_P);	}/** Changes the graph. */	public void apply() {				System.out.println(report(getGraph()));	}		public static String report(Graph g) {		return "Failing attractors: "+failingAttractors(g)+"\n"+"Failing repulsors: "+failingRepulsors(g);	}	public static ArrayList<Edge> failingAttractors(Graph g) {		ArrayList<Edge> ret = new ArrayList<Edge>();		for(Edge e : g.getEdges()) {			EdgeType et = e.getType();			if(et.equals(APCircleDisplay.ATTRACTOR)) {				double maxLength = Double.parseDouble(e.getLabel());				double actualLength = Util.distance(e.getFrom().getCentre(), e.getTo().getCentre());				if(maxLength< actualLength) {					ret.add(e);				}			}		}		return ret;	}		public static ArrayList<Edge> failingRepulsors(Graph g) {		ArrayList<Edge> ret = new ArrayList<Edge>();		for(Edge e : g.getEdges()) {			EdgeType et = e.getType();			if(et.equals(APCircleDisplay.REPULSOR)) {				double minLength = Double.parseDouble(e.getLabel());				double actualLength = Util.distance(e.getFrom().getCentre(), e.getTo().getCentre());				if(minLength > actualLength) {					ret.add(e);				}			}		}		return ret;	}	}